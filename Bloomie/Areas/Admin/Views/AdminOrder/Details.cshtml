@model Bloomie.Models.Entities.Order
@using Bloomie.Models.Entities

@{
    ViewData["Title"] = "Chi tiết đơn hàng";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid mt-2 p-0">
    <div class="card shadow-sm border-0">
        <div class="card-body">
            <!-- Tiêu đề -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="fw-bold text-dark">
                    <i class="fas fa-file-alt text-primary me-2"></i> Chi tiết đơn hàng #@Model.Id
                </h2>
                <a asp-area="Admin" asp-controller="AdminOrder" asp-action="Index" class="btn btn-primary shadow-sm">
                    <i class="fas fa-arrow-left me-2"></i> Quay lại danh sách
                </a>
            </div>

            <!-- Thông tin đơn hàng -->
            <div class="mb-4">
                <h4 class="fw-bold text-dark mb-3">Thông tin đơn hàng</h4>
                <div class="order-info">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <span class="fw-semibold text-dark"><i class="fas fa-hashtag me-2"></i> ID:</span>
                        <span>#@Model.Id</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <span class="fw-semibold text-dark"><i class="fas fa-user me-2"></i> Khách hàng:</span>
                        <span>@Model.User.FullName</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <span class="fw-semibold text-dark"><i class="fas fa-calendar-alt me-2"></i> Ngày đặt:</span>
                        <span>@Model.OrderDate.ToString("dd/MM/yyyy HH:mm:ss")</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <span class="fw-semibold text-dark"><i class="fas fa-map-marker-alt me-2"></i> Địa chỉ giao hàng:</span>
                        <span>@Model.ShippingAddress</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <span class="fw-semibold text-dark"><i class="fas fa-sticky-note me-2"></i> Ghi chú:</span>
                        <span>@(string.IsNullOrEmpty(Model.Notes) ? "Không có ghi chú" : Model.Notes)</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <span class="fw-semibold text-dark"><i class="fas fa-money-bill-wave me-2"></i> Tổng tiền:</span>
                        <span class="text-danger fw-bold" data-total="@Model.TotalPrice">@Model.TotalPrice.ToString("#,##0") đ</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                        <span class="fw-semibold text-dark"><i class="fas fa-info-circle me-2"></i> Trạng thái:</span>
                        @switch (Model.OrderStatus)
                        {
                            case OrderStatus.Pending:
                                <span class="badge bg-secondary text-dark rounded-pill px-3 py-2">Chờ xử lý</span>
                                break;
                            case OrderStatus.Processing:
                                <span class="badge bg-info rounded-pill px-3 py-2">Đang xử lý</span>
                                break;
                            case OrderStatus.Shipped:
                                <span class="badge bg-primary rounded-pill px-3 py-2">Đã giao cho đơn vị vận chuyển</span>
                                break;
                            case OrderStatus.Delivered:
                                <span class="badge bg-success rounded-pill px-3 py-2">Đã giao</span>
                                break;
                            case OrderStatus.Cancelled:
                                <span class="badge bg-danger rounded-pill px-3 py-2" style="color: #ffffff">Đã hủy</span>
                                break;
                            default:
                                <span class="badge bg-secondary text-dark rounded-pill px-3 py-2">Không xác định</span>
                                break;
                        }
                    </div>
                </div>
            </div>

            <!-- Bảng chi tiết đơn hàng -->
            <div class="table-responsive">
                <h4 class="fw-bold text-dark mb-3"><i class="fas fa-cart-arrow-down me-2"></i> Sản phẩm trong đơn hàng</h4>
                <table class="table table-hover table-bordered mb-0">
                    <thead class="bg-primary text-white">
                        <tr>
                            <th class="col-image">Hình ảnh</th>
                            <th class="col-name">Tên sản phẩm</th>
                            <th class="col-price">Giá</th>
                            <th class="col-quantity">Số lượng</th>
                            <th class="col-total">Tổng</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detail in Model.OrderDetails)
                        {
                            <tr>
                                <td>
                                    @if (!string.IsNullOrEmpty(detail.Product.ImageUrl))
                                    {
                                        <img src="@detail.Product.ImageUrl" alt="@detail.Product.Name" width="80" height="80" class="img-thumbnail" />
                                    }
                                    else
                                    {
                                        <span class="text-muted">No Image</span>
                                    }
                                </td>
                                <td class="text-left product-name">@detail.Product.Name</td>
                                <td class="price-cell" data-price="@detail.Price">@detail.Price.ToString("#,##0") đ</td>
                                <td>@detail.Quantity</td>
                                <td class="total-cell" data-total="@(detail.Quantity * detail.Price)">@((detail.Quantity * detail.Price).ToString("#,##0")) đ</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<style>
    :root {
        --primary-color: #2563eb;
        --secondary-color: #60a5fa;
        --text-dark: #1e293b;
        --text-light: #ffffff;
        --background-light: #f8fafc;
    }

    h2, h4 {
        font-family: 'Inter', sans-serif;
        font-weight: 600;
        color: var(--text-dark);
    }

    h2 {
        font-size: 1.75rem;
    }

    h4 {
        font-size: 1.25rem;
    }

    .container-fluid {
        padding-left: 0 !important;
        padding-right: 0 !important;
        margin: 0 !important;
        width: 100% !important;
    }

    .card {
        width: 100% !important;
        max-width: none !important;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        background-color: #ffffff;
    }

    .card-body {
        padding: 20px;
    }

    .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        border-radius: 6px;
        padding: 6px 12px;
        font-size: 0.9rem;
        transition: all 0.2s ease;
    }

        .btn-primary:hover {
            background-color: #1d4ed8;
            border-color: #1d4ed8;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

    .order-info .d-flex {
        font-size: 0.9rem;
        color: var(--text-dark);
        line-height: 1.6;
        border-bottom: 1px solid #e5e7eb;
        padding-bottom: 8px;
        margin-bottom: 8px;
    }

    .order-info .fw-semibold {
        color: var(--text-dark);
        font-weight: 500;
    }

    .order-info span:last-child {
        color: #4b5563;
    }

    .badge {
        font-size: 0.8rem;
        padding: 5px 10px;
        border-radius: 12px;
    }

    .table {
        background-color: #ffffff;
        border-radius: 8px;
        table-layout: fixed;
        width: 100%;
        font-size: 0.9rem;
    }

        .table th, .table td {
            border-color: #e5e7eb;
            text-align: center;
            vertical-align: middle;
            padding: 10px;
        }

        .table th {
            background-color: var(--primary-color);
            color: var(--text-light);
            font-weight: 500;
            text-transform: uppercase;
            font-size: 0.85rem;
        }

    .table-hover tbody tr:hover {
        background-color: #f1f5f9;
    }

    .table-bordered td.text-left {
        text-align: left !important;
    }

    .col-image {
        width: 15%;
        min-width: 130px;
    }

    .col-name {
        width: 40%;
        min-width: 250px;
    }

    .col-price {
        width: 15%;
        min-width: 130px;
    }

    .col-quantity {
        width: 15%;
        min-width: 90px;
    }

    .col-total {
        width: 15%;
        min-width: 130px;
    }

    .product-name {
        white-space: normal;
        overflow-wrap: break-word;
        max-width: 100%;
        line-height: 1.4;
    }

    .price-cell, .total-cell {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100%;
    }

    .img-thumbnail {
        border: 1px solid #e5e7eb;
        border-radius: 6px;
        transition: all 0.2s ease;
        max-width: 80px;
        height: auto;
    }

        .img-thumbnail:hover {
            border-color: var(--primary-color);
            box-shadow: 0 0 6px rgba(37, 99, 235, 0.2);
            transform: scale(1.05);
        }
</style>

<script>
    function formatNumber(number) {
        return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

    document.addEventListener('DOMContentLoaded', function () {
        const priceCells = document.querySelectorAll('.price-cell');
        const totalCells = document.querySelectorAll('.total-cell');
        const orderTotal = document.querySelector('.order-info .text-danger[data-total]');

        priceCells.forEach(cell => {
            let value = parseFloat(cell.getAttribute('data-price'));
            if (!isNaN(value)) {
                cell.textContent = formatNumber(value) + ' đ';
            }
        });

        totalCells.forEach(cell => {
            let value = parseFloat(cell.getAttribute('data-total'));
            if (!isNaN(value)) {
                cell.textContent = formatNumber(value) + ' đ';
            }
        });

        if (orderTotal) {
            let value = parseFloat(orderTotal.getAttribute('data-total'));
            if (!isNaN(value)) {
                orderTotal.textContent = formatNumber(value) + ' đ';
            }
        }
    });
</script>