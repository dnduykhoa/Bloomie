@model IEnumerable<Bloomie.Models.Entities.Order>
@using Bloomie.Models.Entities

@{
    ViewData["Title"] = "Quản lý đơn hàng";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";

    int currentPage = ViewData["CurrentPage"] != null ? (int)ViewData["CurrentPage"] : 1;
    int totalPages = ViewData["TotalPages"] != null ? (int)ViewData["TotalPages"] : 1;
    int totalItems = ViewData["TotalItems"] != null ? (int)ViewData["TotalItems"] : 0;
    string searchString = ViewData["SearchString"]?.ToString();
}

<div class="container-fluid mt-2 p-0">
    <div class="card shadow-sm border-0">
        <div class="card-body">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="fw-bold text-dark">
                    <i class="fas fa-shopping-cart text-primary me-2"></i> Danh sách đơn hàng
                </h2>
            </div>

            <!-- Search Bar and Filter -->
            <div class="mb-4">
                <form asp-action="Index" method="get" class="d-flex align-items-center">
                    <div class="input-group" style="max-width: 400px;">
                        <input type="text" name="searchString" id="searchInput" class="form-control" placeholder="Tìm kiếm đơn hàng (ID, Khách hàng, Địa chỉ)..." value="@searchString" />
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                    @if (!string.IsNullOrEmpty(searchString))
                    {
                        <a asp-action="Index" class="btn btn-secondary ms-2">
                            <i class="fas fa-times"></i>
                        </a>
                    }
                    <select id="statusFilter" class="form-control ms-2" style="max-width: 200px;">
                        <option value="">Tất cả trạng thái</option>
                        <option value="Pending">Chờ xử lý</option>
                        <option value="Processing">Đang xử lý</option>
                        <option value="Shipped">Đã giao cho đơn vị vận chuyển</option>
                        <option value="Delivered">Đã giao</option>
                        <option value="Cancelled">Đã hủy</option>
                    </select>
                </form>
            </div>

            <!-- Order Table -->
            <div class="table-responsive">
                <table class="table table-hover table-bordered mb-0" id="orderTable">
                    <thead class="bg-primary text-white">
                        <tr>
                            <th class="col-id">STT</th>
                            <th class="col-customer">Khách hàng</th>
                            <th class="col-date">Ngày đặt</th>
                            <th class="col-total">Tổng tiền</th>
                            <th class="col-status">Trạng thái</th>
                            <th class="col-actions">Hành động</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Any())
                        {
                            int pageSize = ViewData["PageSize"] != null && int.TryParse(ViewData["PageSize"].ToString(), out int ps) ? ps : 10;
                            int index = (currentPage - 1) * pageSize + 1;

                            @foreach (var order in Model)
                            {
                                <tr>
                                    <td>@index</td>
                                    <td class="text-left customer-name">@(order.User?.FullName ?? "Không xác định")</td>
                                    <td>@order.OrderDate.ToString("dd/MM/yyyy HH:mm:ss")</td>
                                    <td class="total-cell" data-total="@order.TotalPrice">@order.TotalPrice.ToString("#,##0") đ</td>
                                    <td>
                                        @switch (order.OrderStatus)
                                        {
                                            case OrderStatus.Pending:
                                                <span class="badge bg-secondary text-dark">Chờ xử lý</span>
                                                break;
                                            case OrderStatus.Processing:
                                                <span class="badge bg-info">Đang xử lý</span>
                                                break;
                                            case OrderStatus.Shipped:
                                                <span class="badge bg-primary">Đã giao cho đơn vị vận chuyển</span>
                                                break;
                                            case OrderStatus.Delivered:
                                                <span class="badge bg-success">Đã giao</span>
                                                break;
                                            case OrderStatus.Cancelled:
                                                <span class="badge bg-danger">Đã hủy</span>
                                                break;
                                            default:
                                                <span class="badge bg-secondary text-dark">Không xác định</span>
                                                break;
                                        }
                                    </td>
                                    <td class="actions-cell">
                                        <a asp-action="Details" asp-route-id="@order.Id" asp-route-currentPage="@currentPage" class="btn btn-info btn-sm" data-bs-toggle="tooltip" data-bs-title="Chi tiết">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <form asp-action="Delete" method="post" onsubmit="return confirm('Bạn có chắc muốn xóa đơn hàng này?');" style="display:inline;">
                                            <input type="hidden" name="id" value="@order.Id" />
                                            <button type="submit" class="btn btn-danger btn-sm" data-bs-toggle="tooltip" data-bs-title="Xóa">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                                index++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center text-muted py-4">
                                    @(string.IsNullOrEmpty(searchString) ? "Không có đơn hàng nào." : "Không tìm thấy đơn hàng nào khớp với từ khóa.")
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination Controls -->
            @if (totalPages > 1)
            {
                <div class="pagination-section mt-4">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="pagination-info">
                            Hiển thị @Model.Count() trong tổng số @totalItems đơn hàng
                        </div>
                        <nav aria-label="Page navigation">
                            <ul class="pagination justify-content-end mb-0">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@(currentPage - 1)" asp-route-searchString="@searchString" aria-label="Previous">
                                        <span aria-hidden="true">«</span>
                                    </a>
                                </li>
                                @for (int i = 1; i <= totalPages; i++)
                                {
                                    <li class="page-item @(i == currentPage ? "active" : "")">
                                        <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-searchString="@searchString">@i</a>
                                    </li>
                                }
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@(currentPage + 1)" asp-route-searchString="@searchString" aria-label="Next">
                                        <span aria-hidden="true">»</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    :root {
        --primary-color: #2563eb;
        --secondary-color: #60a5fa;
        --text-dark: #1e293b;
        --text-light: #ffffff;
        --background-light: #f8fafc;
    }

    h2 {
        font-family: 'Inter', sans-serif;
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--text-dark);
    }

    .container-fluid {
        padding-left: 0 !important;
        padding-right: 0 !important;
        margin: 0 !important;
        width: 100% !important;
    }

    .card {
        width: 100% !important;
        max-width: none !important;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        background-color: #ffffff;
    }

    .card-body {
        padding: 20px;
    }

    .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        border-radius: 6px;
        padding: 6px 12px;
        font-size: 0.9rem;
        transition: all 0.2s ease;
    }

        .btn-primary:hover {
            background-color: #1d4ed8;
            border-color: #1d4ed8;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

    .btn-secondary {
        background-color: #6b7280;
        border-color: #6b7280;
        border-radius: 6px;
        padding: 6px 12px;
        font-size: 0.9rem;
        transition: all 0.2s ease;
    }

        .btn-secondary:hover {
            background-color: #4b5563;
            border-color: #4b5563;
            transform: translateY(-1px);
        }

    .form-control {
        border-radius: 6px;
        border: 1px solid #d1d5db;
        padding: 8px;
        font-size: 0.9rem;
        transition: all 0.2s ease;
    }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
            outline: none;
        }

    .input-group {
        border-radius: 6px;
    }

    .table {
        background-color: #ffffff;
        border-radius: 8px;
        table-layout: fixed;
        width: 100%;
        font-size: 0.9rem;
    }

        .table th, .table td {
            border-color: #e5e7eb;
            text-align: center;
            vertical-align: middle;
            padding: 10px;
        }

        .table th {
            background-color: var(--primary-color);
            color: var(--text-light);
            font-weight: 500;
            text-transform: uppercase;
            font-size: 0.85rem;
        }

    .table-hover tbody tr:hover {
        background-color: #f1f5f9;
    }

    .table-bordered td.text-left {
        text-align: left !important;
    }

    .col-id {
        width: 5%;
        min-width: 50px;
    }

    .col-customer {
        width: 25%;
        min-width: 200px;
    }

    .col-date {
        width: 20%;
        min-width: 150px;
    }

    .col-total {
        width: 15%;
        min-width: 130px;
    }

    .col-status {
        width: 20%;
        min-width: 150px;
    }

    .col-actions {
        width: 15%;
        min-width: 160px;
    }

    .customer-name, .total-cell {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100%;
    }

    .actions-cell {
        white-space: nowrap;
    }

    .btn-info, .btn-danger {
        border-radius: 6px;
        padding: 4px 8px;
        font-size: 0.8rem;
        min-width: 32px;
        transition: all 0.2s ease;
        margin-right: 4px;
    }

    .btn-info {
        background-color: #06b6d4;
        border-color: #06b6d4;
    }

        .btn-info:hover {
            background-color: #0891b2;
            transform: translateY(-1px);
        }

    .btn-danger {
        background-color: #ef4444;
        border-color: #ef4444;
        margin-right: 0;
    }

        .btn-danger:hover {
            background-color: #dc2626;
            transform: translateY(-1px);
        }

    .badge {
        font-size: 0.8rem;
        padding: 5px 10px;
        border-radius: 12px;
    }

    .pagination-section {
        padding: 12px 0;
        background-color: #f8fafc;
        border-top: 1px solid #e5e7eb;
    }

    .pagination-info {
        font-size: 0.85rem;
        color: #6b7280;
    }

    .pagination .page-link {
        border-radius: 6px;
        margin: 0 4px;
        color: var(--primary-color);
        border: 1px solid #d1d5db;
        font-size: 0.85rem;
        padding: 6px 12px;
        transition: all 0.2s ease;
    }

    .pagination .page-item.active .page-link {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        color: var(--text-light);
    }

    .pagination .page-item.disabled .page-link {
        color: #d1d5db;
        background-color: #f8fafc;
        border-color: #d1d5db;
    }

    .pagination .page-link:hover {
        background-color: #e5e7eb;
        border-color: #d1d5db;
    }
</style>

@section Scripts {
    <script>
        function formatNumber(number) {
            return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }

        document.addEventListener('DOMContentLoaded', function () {
            const totalCells = document.querySelectorAll('.total-cell');
            totalCells.forEach(cell => {
                let value = parseFloat(cell.getAttribute('data-total'));
                if (!isNaN(value)) {
                    cell.textContent = formatNumber(value) + ' đ';
                }
            });

            // Initialize Bootstrap tooltips
            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
            const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));

            // Client-side filtering for status only
            function filterOrders() {
                const statusFilter = document.getElementById('statusFilter').value;
                const rows = document.querySelectorAll('#orderTable tbody tr');

                rows.forEach(row => {
                    const orderStatusElement = row.cells[4].querySelector('.badge');
                    const orderStatus = orderStatusElement ? orderStatusElement.textContent.trim() : '';

                    let matchesStatus = true;

                    if (statusFilter !== '') {
                        let statusText = '';
                        switch (statusFilter) {
                            case 'Pending':
                                statusText = 'Chờ xử lý';
                                break;
                            case 'Processing':
                                statusText = 'Đang xử lý';
                                break;
                            case 'Shipped':
                                statusText = 'Đã giao cho đơn vị vận chuyển';
                                break;
                            case 'Delivered':
                                statusText = 'Đã giao';
                                break;
                            case 'Cancelled':
                                statusText = 'Đã hủy';
                                break;
                        }
                        matchesStatus = orderStatus === statusText;
                    }

                    if (matchesStatus) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            }

            document.getElementById('statusFilter').addEventListener('change', filterOrders);
        });
    </script>
}